name: 'Semver to tag'
version: 0.2.0
description: 'Given a valid Semver, update the tags on the github repo.'
inputs:
  semver: 
    description: 'Valid semver'
  update_tags:
    description: "true or false, update the github repository tags"
    default: 'true'
outputs:
  tag_exists:
    description: "Boolean of if all tags already existed."
    value: ${{ steps.tag_exists.outputs.tag_exists }}
  semver_tags:
    description: "Space seperated semver tags"
    value: ${{ steps.get_version_tags.outputs.tags }}
  major_tag:
    description: "Major tag version (e.g. v1)"
    value: ${{ steps.get_version_tags.outputs.major }}
  minor_tag:
    description: "Major tag version (e.g. v1.1)"
    value: ${{ steps.get_version_tags.outputs.minor }}
  patch_tag:
    description: "Major tag version (e.g. v1.1.1)"
    value: ${{ steps.get_version_tags.outputs.patch }}

runs:
  using: "composite"
  steps:

    - name: Self warning
      uses: ajparsons/sha-version-warning@3bf9d42078fa317ac4e17045ffb2504b31859e03
      with: 
        action_path: ${{ github.action_path }}

    - name: Get version tags
      id: get_version_tags
      shell: bash
      run: |
        cd ${{ github.action_path }}
        python get_tags.py
      env:
        INPUT_SEMVER: ${{ inputs.semver }}

    - name: Check tag does not exist
      id: tag_exists
      shell: bash
      run: |
        if [ $(git tag -l "v$VERSION") ]; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Tag v$VERSION already exists, do not update tags."
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "Tag v$VERSION does not exist, update tags."
        fi
      env:
        VERSION: "${{ inputs.semver }}"


    - name: Update git tags
      if: ${{ inputs.update_tags == 'true' && steps.tag_exists.outputs.tag_exists == 'false'}}
      shell: bash
      run: |
          echo "Assigning tags to current commit: $TAGS"
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git tag -f -a -m "Latest release" "latest"
          for val in $TAGS; do
            git tag -f -a -m "Release for $val" "$val"
          done
          git push -f --tags
      env:
        TAGS: ${{ steps.get_version_tags.outputs.tags }}
